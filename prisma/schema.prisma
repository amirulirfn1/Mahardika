generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AgencySubscription {
  BASIC
  PRO
  TEAM
}

enum Role {
  PLATFORM_ADMIN
  AGENCY_OWNER
  AGENT
  AGENCY_STAFF
  CUSTOMER
}

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum PolicyStatus {
  DRAFT
  ACTIVE
  LAPSED
  CANCELLED
}

enum PointsSource {
  purchase
  renewal
  manual_adjustment
}

enum CommChannel {
  whatsapp
  sms
  email
  note
}

model Agency {
  id             String            @id @default(cuid())
  name           String
  slug           String            @unique
  address        String?
  phone          String?
  email          String?
  subscription   AgencySubscription @default(BASIC)
  staffLimit     Int               @default(3)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  users          User[]
  customers      Customer[]
  policies       Policy[]
  communications Communication[]
  auditLogs      AuditLog[]

  @@index([slug])
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  image     String?
  role      Role     @default(AGENCY_STAFF)
  agencyId  String?
  locale    String   @default("en")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agency    Agency?  @relation(fields: [agencyId], references: [id])
  accounts  Account[]
  sessions  Session[]
  policies  Policy[]           @relation("PolicyCreatedBy")
  payments  PolicyPayment[]    @relation("PaymentCreatedBy")
  quotations Quotation[]       @relation("QuotationUploadedBy")
  communications Communication[] @relation("CommunicationCreatedBy")
  auditLogs AuditLog[]         @relation("AuditLogActor")

  @@index([agencyId])
}

model Customer {
  id         String       @id @default(cuid())
  agencyId   String
  name       String
  email      String?
  phone      String?
  nationalId String?
  notes      String?
  points     Int          @default(0)
  tier       LoyaltyTier  @default(BRONZE)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  agency     Agency       @relation(fields: [agencyId], references: [id])
  policies   Policy[]
  pointsTx   PointsTransaction[]

  @@index([agencyId])
  @@unique([agencyId, email])
  @@unique([agencyId, phone])
  @@unique([agencyId, nationalId])
}

model Policy {
  id           String         @id @default(cuid())
  agencyId     String
  customerId   String
  provider     String
  product      String
  policyNumber String?
  startDate    DateTime?
  endDate      DateTime?
  premiumRm    Decimal?       @db.Decimal(10, 2)
  status       PolicyStatus   @default(DRAFT)
  docsUrl      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  agency       Agency         @relation(fields: [agencyId], references: [id])
  customer     Customer       @relation(fields: [customerId], references: [id])
  payments     PolicyPayment[]
  quotations   Quotation[]
  pointsTx     PointsTransaction[]
  createdById  String?
  createdBy    User?          @relation("PolicyCreatedBy", fields: [createdById], references: [id])

  @@index([agencyId])
  @@index([customerId])
  @@index([status])
}

model PolicyPayment {
  id            String   @id @default(cuid())
  policyId      String
  amountRm      Decimal  @db.Decimal(10, 2)
  paidAt        DateTime?
  method        String?
  referenceNote String?
  createdById   String?
  createdAt     DateTime @default(now())
  policy        Policy   @relation(fields: [policyId], references: [id])
  createdBy     User?    @relation("PaymentCreatedBy", fields: [createdById], references: [id])

  @@index([policyId])
}

model Quotation {
  id           String   @id @default(cuid())
  policyId     String
  source       String
  uploadedById String?
  fileUrl      String
  createdAt    DateTime @default(now())
  policy       Policy   @relation(fields: [policyId], references: [id])
  uploadedBy   User?    @relation("QuotationUploadedBy", fields: [uploadedById], references: [id])

  @@index([policyId])
}

model PointsTransaction {
  id           String        @id @default(cuid())
  customerId   String
  policyId     String?
  source       PointsSource
  amountPoints Int
  amountRm     Decimal?      @db.Decimal(10, 2)
  note         String?
  createdAt    DateTime      @default(now())
  customer     Customer      @relation(fields: [customerId], references: [id])
  policy       Policy?       @relation(fields: [policyId], references: [id])

  @@index([customerId])
  @@index([policyId])
  @@index([source])
}

model Communication {
  id           String      @id @default(cuid())
  agencyId     String
  channel      CommChannel
  toName       String?
  toAddress    String?
  templateKey  String?
  message      String
  relatedType  String?
  relatedId    String?
  sentAt       DateTime?
  createdById  String?
  createdAt    DateTime    @default(now())
  agency       Agency      @relation(fields: [agencyId], references: [id])
  createdBy    User?       @relation("CommunicationCreatedBy", fields: [createdById], references: [id])

  @@index([agencyId])
  @@index([channel])
}

model AuditLog {
  id        String   @id @default(cuid())
  tenantId  String?
  actorId   String?
  entity    String
  entityId  String?
  action    String
  before    Json?
  after     Json?
  createdAt DateTime @default(now())
  tenant    Agency?  @relation(fields: [tenantId], references: [id])
  actor     User?    @relation("AuditLogActor", fields: [actorId], references: [id])

  @@index([tenantId])
  @@index([actorId])
  @@index([entity])
  @@index([createdAt])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@index([expires])
}
